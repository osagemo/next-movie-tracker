// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}

model Movie {
  id             Int               @id @default(autoincrement())
  imdbId         String            @db.VarChar(50)
  title          String            @db.VarChar(255)
  releaseDateUtc DateTime
  imageUrl       String            @db.VarChar(500)
  movieLists     MovieList_Movie[]

  @@map("Movies")
}

model MovieList {
  id       Int               @id @default(autoincrement())
  name     String
  movies   MovieList_Movie[]
  listType ListType

  users User_MovieList[]
  @@map("MovieLists")
}

model MovieList_Movie {
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     Int
  movieList   MovieList @relation(fields: [movieListId], references: [id])
  movieListId Int
  addedAt     DateTime  @default(now())

  @@id([movieId, movieListId])
  @@map("MovieLists_Movies")
}

model User_MovieList {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  movieList   MovieList @relation(fields: [movieListId], references: [id])
  movieListId Int
  addedAt     DateTime  @default(now())

  @@id([userId, movieListId])
  @@map("Users_MovieLists")
}

enum ListType {
  SEEN
  WANNA
}

//// NextAuth Models

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  movielists    User_MovieList[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
